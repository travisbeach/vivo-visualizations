// Generated by CoffeeScript 1.11.1
(function() {
  var BubbleChart, root,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BubbleChart = (function() {
    function BubbleChart(data) {
      this.hide_details = bind(this.hide_details, this);
      this.format_person = bind(this.format_person, this);
      this.format_people = bind(this.format_people, this);
      this.make_details_clickable = bind(this.make_details_clickable, this);
      this.show_details = bind(this.show_details, this);
      this.hide_pi = bind(this.hide_pi, this);
      this.display_pi = bind(this.display_pi, this);
      this.hide_funagen = bind(this.hide_funagen, this);
      this.display_funagen = bind(this.display_funagen, this);
      this.hide_dept = bind(this.hide_dept, this);
      this.display_dept = bind(this.display_dept, this);
      this.hide_years = bind(this.hide_years, this);
      this.display_years = bind(this.display_years, this);
      this.move_towards_pi = bind(this.move_towards_pi, this);
      this.move_towards_funagen = bind(this.move_towards_funagen, this);
      this.move_towards_dept = bind(this.move_towards_dept, this);
      this.move_towards_year = bind(this.move_towards_year, this);
      this.display_by_pi = bind(this.display_by_pi, this);
      this.display_by_funagen = bind(this.display_by_funagen, this);
      this.display_by_dept = bind(this.display_by_dept, this);
      this.display_by_year = bind(this.display_by_year, this);
      this.move_towards_center = bind(this.move_towards_center, this);
      this.display_group_all = bind(this.display_group_all, this);
      this.start = bind(this.start, this);
      this.create_vis = bind(this.create_vis, this);
      this.create_nodes = bind(this.create_nodes, this);
      this.setup_pi_centers = bind(this.setup_pi_centers, this);
      this.setup_funagen_centers = bind(this.setup_funagen_centers, this);
      this.setup_dept_centers = bind(this.setup_dept_centers, this);
      this.setup_year_centers = bind(this.setup_year_centers, this);
      var default_dept, default_funagen, default_pi, default_year, dept, funagen, item, j, k, l, len, len1, len2, len3, len4, len5, m, max_amount, n, o, person, pi, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, year;
      this.data = data;
      this.width = 700;
      this.height = 600;
      this.currentlyClicked = false;
      this.years = [];
      this.depts = [];
      this.funagens = [];
      this.pis = [];
      ref = this.data;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (ref1 = item.Start, indexOf.call(this.years, ref1) < 0) {
          this.years.push(item.Start);
        }
        if (ref2 = item.dept.name, indexOf.call(this.depts, ref2) < 0) {
          this.depts.push(item.dept.name);
        }
        if (ref3 = item.funagen.name, indexOf.call(this.funagens, ref3) < 0) {
          this.funagens.push(item.funagen.name);
        }
        ref4 = item.people;
        for (k = 0, len1 = ref4.length; k < len1; k++) {
          person = ref4[k];
          if (ref5 = person.name, indexOf.call(this.pis, ref5) < 0) {
            this.pis.push(person.name);
          }
        }
      }
      this.years.sort();
      this.years.reverse();
      this.depts.sort();
      this.funagens.sort();
      this.pis.sort();
      ref6 = this.years;
      for (l = 0, len2 = ref6.length; l < len2; l++) {
        year = ref6[l];
        $("#years").append($("<option name='" + year + "'>" + year + "</option>"));
      }
      ref7 = this.depts;
      for (m = 0, len3 = ref7.length; m < len3; m++) {
        dept = ref7[m];
        $("#depts").append($("<option name='" + dept + "'>" + dept + "</option>"));
      }
      ref8 = this.funagens;
      for (n = 0, len4 = ref8.length; n < len4; n++) {
        funagen = ref8[n];
        $("#funagens").append($("<option name='" + funagen + "'>" + funagen + "</option>"));
      }
      ref9 = this.pis;
      for (o = 0, len5 = ref9.length; o < len5; o++) {
        pi = ref9[o];
        $("#pis").append($("<option name='" + pi + "'>" + pi + "</option>"));
      }
      this.tooltip = CustomTooltip("gates_tooltip", 400);
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.fill_color = d3.scale.ordinal().domain(["unknown", "low", "medium", "high"]).range(["#41B3A7", "#81F7F3", "#819FF7", "#BE81F7"]);
      max_amount = d3.max(this.data, function(d) {
        return parseInt(d.Cost);
      });
      this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 20]);
      default_year = this.years[0];
      this.setup_year_centers(default_year);
      default_dept = this.depts[0];
      this.setup_dept_centers(default_dept);
      default_funagen = this.funagens[0];
      this.setup_funagen_centers(default_funagen);
      default_pi = this.pis[0];
      this.setup_pi_centers(default_pi);
      this.create_nodes();
      this.create_vis();
      this.vis.on("click", (function(_this) {
        return function() {
          _this.tooltip.hideTooltip();
          return _this.currentlyClicked = false;
        };
      })(this));
    }

    BubbleChart.prototype.setup_year_centers = function(currentYear) {
      var j, len, ref, year;
      this.year_centers = {};
      ref = this.years;
      for (j = 0, len = ref.length; j < len; j++) {
        year = ref[j];
        this.year_centers['' + year] = {
          x: this.width + 500,
          y: this.height + 500
        };
      }
      return this.year_centers['' + currentYear] = {
        x: this.width / 2,
        y: this.height / 2
      };
    };

    BubbleChart.prototype.setup_dept_centers = function(currentDept) {
      var dept, j, len, ref;
      this.dept_centers = {};
      ref = this.depts;
      for (j = 0, len = ref.length; j < len; j++) {
        dept = ref[j];
        this.dept_centers[dept] = {
          x: this.width + 500,
          y: this.height + 500
        };
      }
      return this.dept_centers[currentDept] = {
        x: this.width / 2,
        y: this.height / 2
      };
    };

    BubbleChart.prototype.setup_funagen_centers = function(currentFunagen) {
      var funagen, j, len, ref;
      this.funagen_centers = {};
      ref = this.funagens;
      for (j = 0, len = ref.length; j < len; j++) {
        funagen = ref[j];
        this.funagen_centers[funagen] = {
          x: this.width + 500,
          y: this.height + 500
        };
      }
      return this.funagen_centers[currentFunagen] = {
        x: this.width / 2,
        y: this.height / 2
      };
    };

    BubbleChart.prototype.setup_pi_centers = function(currentPI) {
      var j, len, pi, ref;
      this.pi_centers = {};
      ref = this.pis;
      for (j = 0, len = ref.length; j < len; j++) {
        pi = ref[j];
        this.pi_centers[pi] = {
          x: this.width + 500,
          y: this.height + 500
        };
      }
      return this.pi_centers[currentPI] = {
        x: this.width / 2,
        y: this.height / 2
      };
    };

    BubbleChart.prototype.create_nodes = function() {
      this.data.forEach((function(_this) {
        return function(d) {
          var node;
          node = {
            id: d.id,
            radius: _this.radius_scale(parseInt(d.Cost)),
            value: d.Cost,
            dept: d.dept,
            name: d.grant.title,
            group: d.group,
            year: d.Start,
            url: d.grant.uri,
            grant: d.grant,
            people: d.people,
            funagen: d.funagen,
            x: Math.random() * 900,
            y: Math.random() * 800
          };
          return _this.nodes.push(node);
        };
      })(this));
      return this.nodes.sort(function(a, b) {
        return b.value - a.value;
      });
    };

    BubbleChart.prototype.create_vis = function() {
      var that;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("fill", (function(_this) {
        return function(d) {
          return _this.fill_color(d.group);
        };
      })(this)).attr("stroke-width", 2).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this)).attr("Id", function(d) {
        return "bubble_" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      }).on("click", function(d, i) {
        that.make_details_clickable(d, i, this);
        return d3.event.stopPropagation();
      });
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    BubbleChart.prototype.start = function() {
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
    };

    BubbleChart.prototype.display_group_all = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.hide_years();
      this.hide_dept();
      this.hide_funagen();
      this.hide_pi();
      this.tooltip.hideTooltip();
      return this.currentlyClicked = false;
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      return (function(_this) {
        return function(d) {
          d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.04) * alpha;
          return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.04) * alpha;
        };
      })(this);
    };

    BubbleChart.prototype.display_by_year = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_year(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.hide_dept();
      this.hide_funagen();
      this.hide_pi();
      this.tooltip.hideTooltip();
      this.currentlyClicked = false;
      return this.display_years();
    };

    BubbleChart.prototype.display_by_dept = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_dept(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.hide_years();
      this.hide_funagen();
      this.hide_pi();
      this.tooltip.hideTooltip();
      this.currentlyClicked = false;
      return this.display_dept();
    };

    BubbleChart.prototype.display_by_funagen = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_funagen(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.hide_years();
      this.hide_dept();
      this.hide_pi();
      this.tooltip.hideTooltip();
      this.currentlyClicked = false;
      return this.display_funagen();
    };

    BubbleChart.prototype.display_by_pi = function() {
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function(_this) {
        return function(e) {
          return _this.circles.each(_this.move_towards_pi(e.alpha)).attr("cx", function(d) {
            return d.x;
          }).attr("cy", function(d) {
            return d.y;
          });
        };
      })(this));
      this.force.start();
      this.hide_years();
      this.hide_dept();
      this.hide_funagen();
      this.tooltip.hideTooltip();
      this.currentlyClicked = false;
      return this.display_pi();
    };

    BubbleChart.prototype.move_towards_year = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.year_centers[d.year];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.move_towards_dept = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.dept_centers[d.dept.name];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.move_towards_funagen = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.funagen_centers[d.funagen.name];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.move_towards_pi = function(alpha) {
      return (function(_this) {
        return function(d) {
          var target;
          target = _this.pi_centers[d.person.name];
          d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
          return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
        };
      })(this);
    };

    BubbleChart.prototype.display_years = function() {
      return $("#years-container").show();
    };

    BubbleChart.prototype.hide_years = function() {
      return $("#years-container").hide();
    };

    BubbleChart.prototype.display_dept = function() {
      return $("#depts-container").show();
    };

    BubbleChart.prototype.hide_dept = function() {
      return $("#depts-container").hide();
    };

    BubbleChart.prototype.display_funagen = function() {
      return $("#funagens-container").show();
    };

    BubbleChart.prototype.hide_funagen = function() {
      return $("#funagens-container").hide();
    };

    BubbleChart.prototype.display_pi = function() {
      return $("#pis-container").show();
    };

    BubbleChart.prototype.hide_pi = function() {
      return $("#pis-container").hide();
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      if (!this.currentlyClicked) {
        d3.select(element).attr("stroke", "black");
        content = "<span class=\"name\"></span><span class=\"value\">" + data.name + "</span><br/>";
        return this.tooltip.showTooltip(content, d3.event);
      }
    };

    BubbleChart.prototype.make_details_clickable = function(data, i, element) {
      var content;
      this.currentlyClicked = true;
      this.tooltip.hideTooltip();
      content = "<span class=\"name\">Title: </span><span class=\"value\"><a href='" + data.grant.uri + "'>" + data.name + "</a></span><br/>";
      content += this.format_people(data.people);
      content += "<span class=\"name\">Academic Unit: </span><span class=\"value\"><a href='" + data.dept.uri + "'>" + data.dept.name + "</a></span><br/>";
      content += "<span class=\"name\">Funding agency:</span><span class=\"value\"><a href='" + data.funagen.uri + "'>" + data.funagen.name + "</a></span><br/>";
      content += "<span class=\"name\">Year: </span><span class=\"value\"> " + data.year + "</span>";
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.format_people = function(people) {
      var p, spans;
      people.sort(function(a, b) {
        if (a.role > b.role) {
          return -1;
        } else if (a.role < b.role) {
          return 1;
        } else {
          return 0;
        }
      });
      spans = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = people.length; j < len; j++) {
          p = people[j];
          results.push(this.format_person(p));
        }
        return results;
      }).call(this);
      return spans.join("");
    };

    BubbleChart.prototype.format_person = function(p) {
      var role;
      if (p.role === "PI") {
        role = "Investigator";
      } else {
        role = "Co-Investigator";
      }
      return "<span class=\"name\">" + role + ": </span><span class=\"value\"><a href='" + p.uri + "'>" + p.name + "</a></span><br/>";
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      return d3.select(element).attr("stroke", (function(_this) {
        return function(d) {
          return d3.rgb(_this.fill_color(d.group)).darker();
        };
      })(this));
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis;
    chart = null;
    render_vis = function(json) {
      chart = new BubbleChart(json);
      chart.start();
      return root.display_all();
    };
    root.display_all = (function(_this) {
      return function() {
        return chart.display_group_all();
      };
    })(this);
    root.display_year = (function(_this) {
      return function() {
        chart.display_by_year();
        return $("#years").change(function(e) {
          chart.setup_year_centers($("#years").val());
          return chart.display_by_year();
        });
      };
    })(this);
    root.display_dept = (function(_this) {
      return function() {
        chart.display_by_dept();
        return $("#depts").change(function(e) {
          chart.setup_dept_centers($("#depts").val());
          return chart.display_by_dept();
        });
      };
    })(this);
    root.display_funagen = (function(_this) {
      return function() {
        chart.display_by_funagen();
        return $("#funagens").change(function(e) {
          chart.setup_funagen_centers($("#funagens").val());
          return chart.display_by_funagen();
        });
      };
    })(this);
    root.display_pi = (function(_this) {
      return function() {
        chart.display_by_pi();
        return $("#pis").change(function(e) {
          chart.setup_pi_centers($("#pis").val());
          return chart.display_by_pi();
        });
      };
    })(this);
    root.toggle_view = (function(_this) {
      return function(view_type) {
        if (view_type === 'year') {
          return root.display_year();
        } else if (view_type === 'dept') {
          return root.display_dept();
        } else if (view_type === 'funagen') {
          return root.display_funagen();
        } else if (view_type === 'pi') {
          return root.display_pi();
        } else {
          return root.display_all();
        }
      };
    })(this);
    return loadVisualization({
      url: applicationContextPath + "/api/dataRequest/grants_bubble_chart",
      transform: transformGrantsData,
      display: render_vis,
      height: 600,
      width: 700
    });
  });

}).call(this);
